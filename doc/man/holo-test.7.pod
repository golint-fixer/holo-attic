=encoding UTF-8

=head1 NAME

/usr/lib/holo/holo-test - test runner for Holo plugins

=head1 SYNOPSIS

    /usr/lib/holo/holo-test <object name> <directory>...

=head1 DESCRIPTION

Holo plugins can be tested by executing Holo commands on fabricated file system
trees, and comparing the output and resulting file system with the expected
results. The B<holo-test> program is a test runner for such test cases.

The standard layout for test cases looks like this:

    /path/to/test/case/       <-- the directory for the test case
        source/               <-- the root directory before running `holo apply`
        target/               <-- the root directory after running `holo apply` (generated by holo-test)
        scan-output           <-- the expected output of `holo scan`  (minus colors, generated by holo-test)
        apply-output          <-- the expected output of `holo apply` (minus colors, generated by holo-test)
        tree                  <-- a dump of the actual files in the target/ directory after running `holo apply` (generated by holo-test)
        expected-tree         <-- what we expect to be in ./tree
        expected-scan-output  <-- what we expect to be in ./scan-output
        expected-apply-output <-- what we expect to be in ./apply-output

=head2 Running a test

To run any number of tests, invoke holo-test with the name of the thing you're
testing (typically the name of a Holo plugin), followed by the paths of the
test case directories. The first argument is only used for formatting the
output.

    $ holo-test 'holo-files plugin' ./tests/holo-files/*
    >> Running test case tests/holo-files/01-first...
    >> Running test case tests/holo-files/02-second...
    >> Running test case tests/holo-files/03-third...
    >> All tests for holo-files plugin completed successfully.

The test will usually output just a progress display (one line per test case).
If a test fails, the failing parts will be printed on the command line. To flag
test failure when run in Continuous Integration setups, C<holo-test> will exit
with non-zero status when one or more test cases fail.

=head2 Writing new test cases

There are plenty of files checked into version control for each test case, but
luckily you can have C<holo-test> generate most of them for you. To create a
new test case, create an empty test case directory and put in there

=over 4

=item C<README>

A read-me of some sort is recommended to explain what the test case covers.

=item C<source/>

This contains the filesystem tree with all the files relevant for the test. The
test then consists of running

    holo scan
    holo diff
    holo apply
    holo apply --force # maybe, see below

in a quasi-chroot here and seeing what output it produces and what it does to
this filesystem tree. If the output of C<holo apply> mentions the word
C<--force>, then C<holo apply --force> is run, too. This covers cases where
plugins refuse to overwrite modified entities, printing instead something like:

    !! Target has been modified (use --force to overwrite)

=item C<source/etc/holorc>

When you're testing a plugin that's not yet installed, you need to tell Holo to
pick it up from the proper location. There's a special syntax allowed in holorc
for that:

    plugin foobar=../../../build/holo-foobar

The path must be relative to the test case directory, since that's the working
directory where Holo is run.

=back

Now run your test case. It will obviously fail since all the files that it
compares its build results to are missing. But we can use these build results
as basis for the missing files. Copy

    tree               -> expected-tree
    apply-output       -> expected-apply-output
    scan-output        -> expected-scan-output
    apply-force-output -> expected-apply-force-output (if it's there)

And the most important step of them all, before checking them into source
control, verify carefully that these files really contain the *expected*
results of the test case run. When that is done, your test case should now pass.
Or not, if the code needs fixing. ;)

=head1 SEE ALSO

L<holo(8)>, L<holo-plugin-interface(7)>

=head1 AUTHOR

Stefan Majewsky

Further documentation is available at the project homepage: http://holocm.org

Please report any issues and feature requests at Github: http://github.com/holocm/holo/issues

=cut
