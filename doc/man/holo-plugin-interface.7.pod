=encoding UTF-8

=head1 NAME

holo-plugin-interface - API specification for Holo plugins

=head1 DESCRIPTION

Holo can leverage plugins to provision previously unknown entity types. For
example, given a hypothetical "FooSQL" database, someone could implement a
plugin for Holo that provisions FooSQL databases or database users. This
document describes the interface that Holo uses to find, invoke, and communicate
with its plugins.

This interface is deliberately designed around classic files and text streams,
so that it can easily be implemented even by shell scripts without needing to
resort to complex parser libraries.

This document describes B<version 1> of the Holo plugin interface.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to
be interpreted as described in L<RFC 2119|https://tools.ietf.org/html/rfc2119>.

=head2 Plugin discovery

Each plugin MUST have an ID following the format C<[a-z0-9][a-z0-9-]*>. When
choosing the plugin ID, redundant verbs like C<manage> or C<provision> SHOULD be
avoided. For example, an appropriate plugin ID for the aforementioned FooSQL
plugin would be C<foosql>. The things provisioned MAY be referenced in plural
form if disambiguation is required. For example, if FooSQL is configured by
multiple plugins, appropriate plugin IDs could include C<foosql-databases> and
C<foosql-users>.

Plugins are not discovered automatically. They MUST be referenced in
F</etc/holorc> (see L<holorc(5)>) by adding the line:

    plugin $PLUGIN_ID

It is RECOMMENDED that plugins install a holoscript to achieve this:

    $ cat /usr/share/holo/repo/50-holo-foosql/etc/holorc.holoscript
    #!/bin/sh
    # This file is part of the holo-foosql package.
    cat
    echo plugin foosql

=head2 Runtime environment

=head3 HOLO_API_VERSION

Plugins SHOULD check the environment variable C<$HOLO_API_VERSION>, which is
set by Holo to contain the current version number of this plugin interface. The
value is always a single positive integer number, currently C<1>. Plugins
SHOULD refuse to operate, and exit with an error message and non-zero exit code
when Holo reports an unknown Holo API version.

=head3 HOLO_ROOT_DIR

Plugins MUST recognize the environment variable C<$HOLO_ROOT_DIR>: If this
variable exists, plugins SHALL assume that Holo is running in test mode. The
variable holds the path to a directory which contains a test scenario resembling
a normal root partition (at least the parts needed for the test scenario).

In test mode, plugins SHOULD NOT talk to system-level daemons or write files
outside the C<$HOLO_ROOT_DIR>. Appropriate mock implementations SHALL be used
instead. Modifying files below C<$HOLO_ROOT_DIR> is allowed.

=head3 HOLO_CACHE_DIR

When plugins want to store temporary data (such as results from an initial scan
operation), they SHALL do so in the directory published by Holo in the
C<$HOLO_CACHE_DIR> environment variable. Holo will create this directory when it
starts up, and clean it up when it exits.

=head3 HOLO_STATE_DIR

When plugins need to store state persistently, between runs of Holo, they SHALL
do so in the directory C</var/lib/holo/$PLUGIN_ID/>, published by Holo in the
C<$HOLO_STATE_DIR> environment variable. Plugins SHOULD use this variable
instead of its definition, since C<$HOLO_STATE_DIR> already accounts for
C<$HOLO_ROOT_DIR>. If the state directory is missing, Holo will create it before
calling the plugin executable. However, plugins are encouraged to create the
state directory at their installation time.

=head3 HOLO_RESOURCE_DIR

Plugins SHALL find their resources (installed by configuration packages) below
F</usr/share/holo/$PLUGIN_ID/>. This path is published by Holo in the
C<$HOLO_RESOURCE_DIR> environment variable. Plugins SHOULD use this variable
instead of its definition, since C<$HOLO_RESOURCE_DIR> already accounts for
C<$HOLO_ROOT_DIR>. Holo will refuse to operate if the resource directory does
not exist, thus plugins SHOULD create it at installation time.

=head2 Call signatures

=head3 The C<scan> operation

The plugin binary is executed one or multiple times when Holo is run. The first
invocation is always with the single argument C<scan>:

    PLUGIN_BINARY=/usr/lib/holo/holo-$PLUGIN_ID
    $PLUGIN_BINARY scan

The plugin shall then scan its C<$HOLO_RESOURCE_DIR> for entities that it can
provision. Any errors encountered shall be reported on stderr. If any fatal
errors are encountered, the plugin shall exit with non-zero exit code.

At the end of scanning, the plugin shall provide on stdout a report for each of
the entities found, in the following form (this example being from the C<files>
plugin from core Holo):

    ENTITY: /etc/locale.gen
    store at: /var/lib/holo/base/etc/locale.gen
    apply: /usr/share/holo/files/00-base/etc/locale.gen

The first line is always C<ENTITY:>, followed by the ID of the entity that is
being described. When an entity is not equivalent to a file, the recommended
format for entity IDs is C<type:identifier>, with the type in singular form. For
example, the hypothetical C<foosql> plugin could report entities like
C<foosql-db:production> or C<foosql-user:sarah>.

The following lines contain further information in the form
C<attribute: value>. These informational lines are not processed further by Holo
(except for pretty-printing), and can be used to convey any sort of useful
information about the entity to the user. In the example above, the information
lines show the application steps that are being performed by C<holo apply>.

For entities that have been read from definition files, it is considered good
practice to list the definition files with the attribute C<found in>, as does
the core C<users-groups> plugin:

    ENTITY: group:sudo
    found in: /usr/share/holo/users-groups/00-base.toml
    with: type: system

A special line syntax is C<ACTION: verb (reason)>. This is used when applying
the entity will do something else than provisioning it. The line shall contain a
verb describing the action taken, and a reason for doing so. For example, the
C<files> plugin uses the action verb C<Scrubbing> to signal that a deleted
configuration file is being cleaned up after.

    ENTITY: target/etc/targetfile-deleted.conf
    ACTION: Scrubbing (target was deleted)
    delete: target/var/lib/holo/files/base/etc/targetfile-deleted.conf

The report for an entity ends at the next C<ENTITY: ID> line, or when EOF is
encountered.

If scanning for entities is expensive, plugins should cache results of their
scanning in C<$HOLO_CACHE_DIR> (as described above).

=head3 The C<apply> operation

If the user requests that one or multiple entities be provisioned (with the
C<holo apply> command), then for each of the selected entities, the
corresponding plugin will be called like this:

    $PLUGIN_BINARY apply $ENTITY_ID

During this operation, the plugin can reuse results from the previously
conducted scanning operation if they have been cached in C<$HOLO_CACHE_DIR>.
Informational output shall be printed on stdout, errors and warnings shall be
printed on stderr. This output will be passed on to the user directly. If an
error occurred during provisioning, the plugin shall exit with non-zero exit
code.

If the plugin finds that the selected entity is already in the desired state, so
that no changes need to made to it, it can write the message C<"not changed\n">
to file descriptor no. 3 (which has been opened by Holo). Holo will then format
its output accordingly (at the time of this writing, by omitting the entity from
its output).

=head3 The C<force-apply> operation

During the C<apply> operation, plugins shall refuse to provision entities that
appear to have been edited or deleted by the user or an external application.
("Refuse" means to display an error message and exit with non-zero exit code.)
However, when the plugin is called like this:

    $PLUGIN_BINARY force-apply $ENTITY_ID

Then the plugin shall overwrite any external changes to the selected entity and
bring it into the desired target state with all means possible. Otherwise, the
C<force-apply> operation works just like C<apply>.

=head3 The C<diff> operation

If the user requests that a diff be printed for one or multiple entities (with
the C<holo diff> command), then for each of the selected entities, the
corresponding plugin will be called like this:

    $PLUGIN_BINARY diff $ENTITY_ID

If the plugin cannot produce a meaningful diff (e.g. for the C<run-scripts>
plugin), the plugin shall exit with zero exit code without printing any output.
In any other event, a unified diff MUST be printed on stdout. If errors occur
while producing the diff, they shall be reported on stderr. If the error
results in the plugin not being able to produce meaningful output, it shall
exit with non-zero exit code.

For entities that are not backed by a file, the plugin is allowed to make up a
diff by choosing a useful textual representation of the entity. An example of
this is the C<users-groups> plugin included in Holo.

=head1 SEE ALSO

L<holo(8)>

=head1 AUTHOR

Stefan Majewsky

Further documentation is available at the project homepage: http://holocm.org

Please report any issues and feature requests at Github: http://github.com/holocm/holo/issues

=cut
