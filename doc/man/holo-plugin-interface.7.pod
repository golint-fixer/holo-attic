=encoding UTF-8

=head1 NAME

holo-plugin-interface - API specification for Holo plugins

=head1 DESCRIPTION

Holo can leverage plugins to provision previously unknown entity types. For
example, given a hypothetical "FooSQL" database, someone could implement a
plugin for Holo that provisions FooSQL databases or database users. This
document describes the interface that Holo uses to find, invoke, and communicate
with its plugins.

This interface is deliberately designed around classic files and text streams,
so that it can easily be implemented even by shell scripts without needing to
resort to complex parser libraries.

This document describes B<version 1> of the Holo plugin interface.

=head2 File/Directory naming conventions

Each plugin must have an ID following the format C<[a-z0-9][a-z0-9-]*>.  When
choosing the plugin ID, avoid redundant verbs like C<manage> or C<provision>.
For example, an appropriate plugin ID for the aforementioned FooSQL plugin would
be C<foosql>. The things provisioned may be referenced in plural form if
disambiguation is required. For example, f FooSQL is configured by multiple
plugins, appropriate plugin IDs could include C<foosql-databases> and
C<foosql-users>.

This identifier is used in various places as described below, using the
placeholder C<$PLUGIN_ID> for the actual plugin ID:

=over 4

=item *

Plugin executables shall be installed to F</usr/lib/holo/holo-$PLUGIN_ID>.

=item *

Configuration packages shall place information about which things are to be
provisioned in the directory F</usr/share/holo/$PLUGIN_ID/>. This directory must
be created when the plugin is installed, as Holo will check for its existence
and refuse to use the plugin if it is missing.

For historical reasons, the C<files> plugin shipped with Holo itself does not
follow this convention, reading from F</usr/share/holo/repo/> instead of
C</usr/share/holo/files/>.

=item *

The plugin's data cache is located at F<$HOLO_CACHE_DIR/$PLUGIN_ID/> (see
below).

=back

=head2 Plugin discovery

Plugins are not discovered automatically. They must be referenced in
F</etc/holorc> (see L<holorc(5)>) by adding the line:

    plugin $PLUGIN_ID

It is recommended that plugins install a holoscript to achieve this:

    $ cat /usr/share/holo/repo/50-holo-foosql/etc/holorc.holoscript
    #!/bin/sh
    # This file is part of the holo-foosql package.
    cat
    echo plugin foosql

=head2 Runtime environment

=head3 HOLO_API_VERSION

Plugins should check the environment variable C<$HOLO_API_VERSION>, which is
set by Holo to contain the current version number of this plugin interface. The
value is always a single positive integer number, currently C<1>. Plugins
should refuse to operate, and exit with an error message and non-zero exit code
when running against an unknown Holo API version.

=head3 HOLO_CACHE_DIR

When Holo runs, it creates the empty directory F<$HOLO_CACHE_DIR/$PLUGIN_ID/>
(where the path C<$HOLO_CACHE_DIR> is published as an environment variable of
the same name), for each plugin and ensures that this directory is cleaned up
when Holo exists. This directory can be used to store calculated data from an
initial scan operation.

=head3 HOLO_ROOT_DIR

Plugins must recognize the environment variable C<$HOLO_ROOT_DIR>: If this
variable exists, plugins shall assume that Holo is running in test mode. The
variable holds the path to a directory which contains a test scenario resembling
a normal root partition (at least the parts needed for the test scenario). Among
other things, this means that the following facts are true:

    test -d "$HOLO_CACHE_DIR/$PLUGIN_ID"
    test -d "$HOLO_ROOT_DIR/usr/share/holo/$PLUGIN_ID"

In test mode, any operations that talk to other daemons or write files outside
the C<$HOLO_ROOT_DIR> are forbidden. Appropriate mock implementations shall be
used instead. Modifying files below C<$HOLO_ROOT_DIR> is allowed.

=head2 The C<scan> operation

The plugin binary is executed one or multiple times when Holo is run. The first
invocation is always with the single argument C<scan>:

    PLUGIN_BINARY=/usr/lib/holo/holo-$PLUGIN_ID
    $PLUGIN_BINARY scan

The plugin shall then scan for the entities that it can provision. Any errors
encountered shall be reported on stderr. If any fatal errors are encountered,
the plugin shall exit with non-zero exit code.

At the end of scanning, the plugin shall provide on stdout a report for each of
the entities found in the following form (this example being from the C<files>
plugin from core Holo):

    ENTITY: /etc/locale.gen
    store at: /var/lib/holo/base/etc/locale.gen
    apply: /usr/share/holo/repo/00-base/etc/locale.gen

The first line is always C<ENTITY:>, followed by the ID of the entity that is
being described. The recommended format for entity IDs is C<type:value>. For
example, the hypothetical C<foosql> plugin could report entities like
C<foosql-db:production> or C<foosql-user:sarah>.

The following lines contain further information in the form C<attribute:
value>. These informational lines are not processed further by Holo (except for
pretty-printing), and can be used to convey any sort of information about the
entity to the user. In the example above, the information lines show the
application steps that are being performed by C<holo apply>.

Another special line syntax is C<ACTION: verb (reason)>. This is used when
applying the entity will do something else than provisioning it. The line shall
contain a verb describing the action taken, and a reason for doing so.
For example, the C<files> plugin uses the action verb C<Scrubbing> to signal
that a deleted configuration file is being cleaned up after.

    ENTITY: target/etc/targetfile-deleted.conf
    ACTION: Scrubbing (target was deleted)
    delete: target/var/lib/holo/base/etc/targetfile-deleted.conf

The report for an entity ends at the next C<ENTITY: ID> line, or when EOF is
encountered.

If scanning for entities is expensive, plugins may cache results of their
scanning in C</tmp/holo-cache/$PLUGIN_ID/>. This directory is created by Holo
before the scan operation, and will be cleaned up when Holo exists.

=head2 The C<apply> operation

If the user requests that one or multiple entities be provisioned (with the
C<holo apply> command), then for each of the selected entities, the
corresponding plugin will be called like this:

    $PLUGIN_BINARY apply $ENTITY_ID

During this operation, the plugin can reuse results from the previously
conducted scanning operation if they have been cached in
C</tmp/holo-cache/$PLUGIN_ID/>. Informational output shall be printed on
stdout, errors and warnings shall be printed on stderr. This output will be
passed on to the user directly. If an error occurred during provisioning,
the plugin shall exit with non-zero exit code.

=head2 The C<force-apply> operation

During the C<apply> operation, plugins shall refuse to provision entities that
appear to have been edited or deleted by the user or an external application.
("Refuse" means to display an error message and exit with non-zero exit code.)
However, when the plugin is called like this:

    $PLUGIN_BINARY force-apply $ENTITY_ID

Then the plugin shall overwrite any external changes to the selected entity and
bring it into the desired target state with all means possible.

=head2 The C<diff> operation

If the user requests that a diff be printed for one or multiple entities (with
the C<holo diff> command), then for each of the selected entities, the
corresponding plugin will be called like this:

    $PLUGIN_BINARY diff $ENTITY_ID

If the plugin cannot produce a meaningful diff (e.g. for the C<run-scripts>
plugin), the plugin shall exit with zero exit code without printing any output.
In any other event, a unified diff shall be printed on stdout. If errors occur
while producing the diff, they shall be reported on stderr. If the error
results in the plugin not being able to produce meaningful output, it shall
exit with non-zero exit code.

For entities that are not backed by a file, the plugin is allowed to make up a
diff by choosing a useful textual representation of the entity. An example of
this is the C<users-groups> plugin included in Holo.

=head1 SEE ALSO

L<holo(8)>

=head1 AUTHOR

Stefan Majewsky

Further documentation is available at the project homepage: http://holocm.org

Please report any issues and feature requests at Github: http://github.com/holocm/holo/issues

=cut
