=encoding UTF-8

=head1 1. Configuration in packages

Configuring a service usually includes installing the application and placing
some configuration files in the right locations. We can do both with a system
package. For example, let's configure C<haveged>. And to make this example
distribution-independent, let's use C<holo-build> to build the package from a
short and readable description file:

    $ cat > configure-haveged.pkg.toml

    [package]
    name     = "configure-haveged"
    version  = "1.0.0"
    requires = [ "haveged" ]

    [[symlink]]
    path   = "/etc/systemd/system/multi-user.target.wants/haveged.service"
    target = "/usr/lib/systemd/system/haveged.service"

    $ holo-build < configure-haveged.pkg.toml

This generates a system package that pulls in the desired application as a
dependency and installs the necessary configuration files. In this case, that's
only one symlink in the right place to enable haveged as a systemd service.

=head1 2. Where the package management fails

Let's look at a second example, and set up an nginx webserver. Again, we pull in
nginx as a dependency, and enable it in systemd.

    $ cat > configure-mywebserver.pkg.toml

    [package]
    name     = "configure-mywebserver"
    version  = "1.0.0"
    requires = [ "nginx" ]

    [[symlink]]
    path   = "/etc/systemd/system/multi-user.target.wants/nginx.service"
    target = "/usr/lib/systemd/system/nginx.service"

    [[file]]
    path        = "/etc/nginx/nginx.conf"
    contentFrom = "nginx.conf"

    $ holo-build < configure-mywebserver.pkg.toml

This time, we add a configuration file (which I've omitted here for brevity),
but when trying to install the package, this produces an error:

    $ sudo pacman -U configure-mywebserver-1.0.0-1-any.tar.xz # install package
    ...
    (1/1) checking package integrity
    (1/1) loading package files
    (1/1) checking for file conflicts
    error: failed to commit transaction (conflicting files)
    configure-mywebserver: /etc/nginx/nginx.conf exists in filesystem
    ...
    $ pacman -Qo /etc/nginx/nginx.conf # who owns this file?
    /etc/nginx/nginx.conf is owned by nginx 1.8.0-1

The nginx package contains an example configuration which is installed in the
same location. The package management cannot resolve this file conflict because
it does not know which package takes precedence.

=head1 3. Resolving the conflicts with Holo

Holo's initial motivation was to resolve exactly these file conflicts. Since
we're in the domain of configuration management, we know that our configuration
takes precedence over the default configuration. But since the package
management insists on putting the default configuration where it is, we have to
fix that after the fact. For now, let's install our configuration in a
different location:

    $ cat > configure-mywebserver.pkg.toml

    [package]
    name     = "configure-mywebserver"
    version  = "1.0.0"
    requires = [ "nginx" ]

    [[symlink]]
    path   = "/etc/systemd/system/multi-user.target.wants/nginx.service"
    target = "/usr/lib/systemd/system/nginx.service"

    [[file]]
    path        = "/usr/share/holo/files/10-mywebserver/etc/nginx/nginx.conf"
    contentFrom = "nginx.conf"

    $ holo-build < configure-mywebserver.pkg.toml

The configuration file has been moved to Holo's resource directory below
F</usr/share/holo/files>. (Don't worry about the C<10-mywebserver> bit for now,
we'll see why it's useful in the next example.) Since C<holo-build> knows what
this is, it has automatically added C<holo-files> (the Holo plugin for
provisioning configuration files) as a dependency for the package:

    $ pacman -Qip configure-mywebserver-1.0.0-2-any.tar.xz
    ...
    Depends On     : nginx  holo-files
    ...

And it has added a post-install script to the package that runs:

    # holo apply

    Working on /etc/nginx/nginx.conf
      store at /var/lib/holo/files/base/etc/nginx/nginx.conf
         apply /usr/share/holo/files/10-mywebserver/etc/nginx/nginx.conf

Of course you can use C<holo> without C<holo-build>, too, by building packages
with the standard distribution tools.

=head1 4. Advanced features

To add to our previous scenario, let's assume that we have successfully rolled
out the C<configure-mywebserver> package to multiple systems, and the
configuration is such that the server listens on port 80. But there is this one
system where we cannot use it yet because another webserver is already running
on port 80. If we want to install it, we need to change the configuration just a
little bit so that nginx listens on port 8080 instead.

Holo can help with that, too. Let's build a new configuration package that builds
on the previous one, by installing it as a dependency.

We want to reuse our configuration from before, but change it slightly.
Thankfully, Holo's configuration repository can not only contain complete
configuration files, but also scripts that modify the configuration file
(identified by the C<.holoscript> extension):

    $ cat > configure-mywebserver-alternateport.pkg.toml

    [package]
    name     = "configure-mywebserver-alternateport"
    version  = "1.0.0"
    requires = [ "configure-mywebserver" ]

    [[file]]
    path    = "/usr/share/holo/files/20-alternate-port/etc/nginx/nginx.conf.holoscript"
    mode    = "0755"
    content = """
        #!/bin/sh
        sed 's/listen\s*80;/listen 8080;/'
    """

    $ holo-build < configure-mywebserver-alternateport.pkg.toml

A holoscript receives the original configuration file on stdin and prints the
modified version on stdout. In this case, we modify the C<listen 80> directive.
When running C<holo apply> while installing the package, this script will be
applied to the configuration from the previous configuration package.

    # holo apply

    Working on /etc/nginx/nginx.conf
      store at /var/lib/holo/files/base/etc/nginx/nginx.conf
         apply /usr/share/holo/files/10-mywebserver/etc/nginx/nginx.conf
      passthru /usr/share/holo/files/20-alternate-port/etc/nginx/nginx.conf.holoscript

The order in which repository files are applied is defined by the directory
names below F</usr/share/holo/files> (C<10-mywebserver> and
C<20-alternate-port>), which we call I<disambiguators>.

Holoscripts can also be used on their own, without a plain configuration
coming before it. In this case, the holoscript modifies the default
configuration installed by the application package.

=begin html

<p class="follow"><a href="./doc.html">Read the documentation Â»</a></p>

=end html
