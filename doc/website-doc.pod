=encoding UTF-8

=head1 User documentation

New to Holo? Check out our feature overview before diving into the details in here.

=begin html

<p class="follow"><a href="./tour.html">Take the tour Â»</a></p>

=end html

=head1 Installation

The recommended method, if possible, is to install Holo as a package.

=over 4

=item *

Arch Linux users can use the L<AUR package|https://aur.archlinux.org/packages/holo>.

=item *

If you have packaged Holo for your distribution, please
L<send me a link|https://github.com/holocm/holo/issues/new> that I can add to
this list.

=back

Alternatively, to install from source, clone the
L<Git repository|https://github.com/holocm/holo>
and build the master branch:

    $ git clone https://github.com/holocm/holo
    $ cd holo
    $ make
    $ make check
    $ sudo make install

You need L<Go|https://golang.org> to compile Holo and
L<Perl|https://www.perl.org> to run the testcase. Packages for Go and Perl are
available for all major distributions. Note that these are all build-time
dependencies; when installed, Holo is a single static binary (plus manpage) that
depends only on a UNIX kernel.

=head1 Building holograms

In Holo, configuration is deployed in packages using the standard package
management tools of your Linux distribution, so first, you should familiarize
yourself with building and installing such packages. When administrating
multiple systems, it is good practice to create a package repository to
distribute configuration updates. To differentiate configuration packages from
the application packages provided by your distribution, we're going to call
these I<holograms>.

The package management allows us to specify application packages and other
holograms as dependencies of our hologram, and put configuration files into the
hologram. Holo only comes into play when we go beyond the capabilities of the
package management.

=for Comment
################################################################################
# NOTE: The parts below are synchronized with the manpage.pod. When editing    #
#       either, make sure to apply the same changes to the other.              #
################################################################################

=head1 The configuration repository

Package management does not allow multiple packages to install a file in the
same location. So when an application package installs a default configuration
file, a hologram cannot directly overwrite this configuration file.

    $ pacman -Qo /etc/nginx/nginx.conf
    /etc/nginx/nginx.conf is owned by nginx 1.8.0-1

Instead, Holo offers a configuration repository at F</usr/share/holo/repo> where the
hologram can put its configuration file.

    $ pacman -Qo /usr/share/holo/repo/20-webserver/etc/nginx/nginx.conf
    /usr/share/holo/repo/20-webserver/etc/nginx/nginx.conf is owned by hologram-webserver 1.0.0-1

The C<holo apply> command is then used to install the hologram's configuration
file in the right place. Most package management tools allow packages to carry
post-install hooks for this purpose.

    $ sudo holo apply
    [holo] Working on /etc/nginx/nginx.conf
    [holo]   store at /var/lib/holo/base/etc/nginx/nginx.conf
    [holo]      apply /usr/share/holo/repo/20-webserver/etc/nginx/nginx.conf

Entries in the configuration repository follow a fixed naming scheme:

    /usr/share/holo/repo/20-webserver/etc/nginx/nginx.conf
      ^         ^            ^
      |         |            |
      |         |            +-- path to target
      |         |
      |         +-- disambiguator
      |
      +-- repository path

The disambiguator is always required, and allows multiple repository files to
operate on the same target (sorted alphabetically by their disambiguator). The
pattern of putting a number at the start of the disambiguator is not required,
but useful to control the ordering of repo files.

=head1 Application strategies

When the repository file is a plain file or a symlink, the default strategy
("apply") is to copy this file to the target location. Symlink targets are
copied verbatim, so relative symlinks should be relative to the target
directory.

When the repository file is an executable file or a symlink to an executable
file carrying the extra C<.holoscript> extension, the script is executed and the
contents of the original file are piped through it to obtain the resulting
configuration file. This strategy is called "passthru" in the output of C<holo
apply> and C<holo scan>.

For example, the following setup installs the default configuration for Pacman,
but enables the "Color" option which is commented out in the default
configuration.

    $ holo scan
    ...
    /etc/pacman.conf
        store at /var/lib/holo/base/etc/pacman.conf
        passthru /usr/share/holo/repo/20-enable-color/etc/pacman.conf.holoscript
    ...
    $ cat /usr/share/holo/repo/20-enable-color/etc/pacman.conf.holoscript
    #!/bin/sh
    sed 's/^#\s*Color$/Color/'

The advantage of holoscripts over plain configuration files is that when the
default configuration is updated, you get the updates as well during the next
C<holo apply>.

    $ sudo pacman -Syu
    ...
    (3/8) upgrading pacman
    warning: /etc/pacman.conf installed as /etc/pacman.conf.pacnew
    ... 

In this example, the system update includes a new default configuration, which
is placed next to the currently used configuration. Holo will recognize this and
use the new default configuration:

    $ sudo holo apply
    ...
    [holo] Working on /etc/pacman.conf
    [holo]     update /etc/pacman.conf.pacnew -&gt; /var/lib/holo/base/etc/pacman.conf
    [holo]   passthru /usr/share/holo/repo/20-enable-color/etc/pacman.conf.holoscript
    ... 

Another advantage is that multiple holoscripts can be chained. Multiple
holograms can thus modify the same default configuration, or further specialize
a base configuration provided by a base hologram:

    $ holo scan
    ...
    /etc/pacman.conf
        store at /var/lib/holo/base/etc/pacman.conf
           apply /usr/share/holo/repo/00-basic/etc/pacman.conf
        passthru /usr/share/holo/repo/10-add-catalyst-repo/etc/pacman.conf.holoscript
        passthru /usr/share/holo/repo/20-enable-color/etc/pacman.conf.holoscript
    ... 

As seen in this example, the disambiguator is used to determine the application
order when multiple repository files work on the same target. There is no
restriction on how repository files are ordered. When somewhere in the
application chain, a plain file is found, the effects of all previous
application steps are discarded and overwritten by that config file.

=head1 Target bases

Before Holo overwrites the default configuration supplied by the application
package, it always takes a copy which is placed below F</var/lib/holo/base> and
called the I<target base>. This typically happens only once. The first
C<holo apply> after installing a new hologram might look like this:

    $ sudo holo apply
    [holo] Working on /etc/nginx/nginx.conf
    [holo]   store at /var/lib/holo/base/etc/nginx/nginx.conf
    [holo]      apply /usr/share/holo/repo/20-webserver/etc/nginx/nginx.conf

But when C<holo apply> is run again, it recognizes that the target base is
already up-to-date:

    $ sudo holo apply
    [holo] Working on /etc/nginx/nginx.conf
    [holo]      apply /usr/share/holo/repo/20-webserver/etc/nginx/nginx.conf

Besides allowing the user to inspect the default configuration, the target base
serves two purposes: First, it is used as a base for applying holoscripts.
Second, the owner, group, permissions and timestamps of the target configuration
are always copied from the target base, and thus match the corresponding
metadata of the default configuration.

=head1 Management of UNIX user accounts and groups

Holograms can install TOML files into F</usr/share/holo> that describe UNIX
user accounts and groups that shall be created during C<holo apply> runs.
For example:

    $ cat /usr/share/holo/01-example.toml

    [[group]]
    name   = "foo"

    [[group]]
    name   = "bar"
    system = true

    [[user]]
    name   = "foo"
    group  = "foo"

    [[user]]
    name   = "qux"
    home   = "/var/lib/qux"
    system = true

    $ sudo holo apply
    [holo] Working on group:bar
    [holo]     create group with type: system
    [holo] Working on group:foo
    [holo]     create group
    [holo] Working on user:foo
    [holo]     create user with group: foo
    [holo] Working on user:qux
    [holo]     create user with type: system, home directory: /var/lib/qux

Behind the scenes, this uses the C<shadow> tools (C<useradd>, C<usermod>,
C<groupadd> and C<groupmod>), so the above is exactly equivalent to

    $ sudo groupadd --system bar
    $ sudo groupadd foo
    $ sudo useradd --gid foo foo
    $ sudo useradd --system --home-dir /var/lib/qux qux

In the TOML definition files, the following attributes are accepted for groups:

=over 4

=item C<name>

(string) the group name

=item C<system>

(bool) if true, gives C<--system> to C<groupadd>

=item C<gid>

(integer) given to C<groupadd> as C<--gid>

=back

And the following attributes are accepted for users:

=over 4

=item C<name>

(string) the user name

=item C<comment>

(string) given to C<useradd> as C<--comment>

=item C<system>

(bool) if true, gives C<--system> to C<useradd>

=item C<uid>

(integer) given to C<useradd> as C<--uid>

=item C<group>

(string) given to C<useradd> as C<--gid>

=item C<groups>

(array of strings) given to C<useradd> as C<--groups>

=item C<home>

(string) given to C<useradd> as C<--home-dir>

=item C<shell>

(string) given to C<useradd> as C<--shell>

=back

In either case, `name` is the only required attribute.

In contrast to files, where Holo operates very confidently (and only refuses
operation when target files were modified manually), users and groups are
treated more carefully. First, whenever an existing user account or group does
not exactly match the definition in the TOML file, Holo will not touch it
unless instructed to apply `--force`:

    $ sudo holo apply user:qux
    [holo] Working on user:qux
    [holo]        has home directory: /var/qux, expected /var/lib/qux (use --force to overwrite)
    $ sudo holo apply --force user:qux
    [holo] Working on user:qux
    [holo]        fix home directory: /var/qux, expected /var/lib/qux

Second, when a hologram is deleted, Holo will never automatically clean up
users or groups (as it does for configuration files), since there might still
be files belonging to the users/groups in question. Recommended best practice
is to have the hologram print a message in its post-remove routine instructing
the administrator to clean up lingering users/groups manually.

Like for configuration files, multiple holograms can contribute to a single
entity. But when multiple definitions for one entity are stacked on top of
each other, they are not allowed to contradict itself. For example, if two
holograms define different home directories, this will be considered an error,
since both holograms might rely on their respective home directory settings.

    $ cat /usr/share/holo/01-first.toml

    [[user]]
    name = "foo"
    home = "/home/foo"

    $ cat /usr/share/holo/02-second.toml

    [[user]]
    name = "foo"
    home = "/var/lib/foo"

    $ holo scan
    [holo] Failed to read /usr/share/holo/02-second.toml:
    [holo]     conflicting home directory for user 'foo' (existing: /home/foo, new: /var/lib/foo)

=cut
